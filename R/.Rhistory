# 첫번째 반복문 ( 반복횟수 : 6회 )
for (i in c(1,2,3,4,5,6)){
# 두번째 반복문 ( 반복횟수 : 6회 )
for (j in 1:6){
# 조건문 생성 ( 조건식 : 두 주사위의 합이 10 )
if (i + j == 10){
# 조건식이 참이라면 -> 2개의 주사위의 값을 출력한다.
print(i,j)
}
}
}
# 첫번째 반복문 ( 반복횟수 : 6회 )
for (i in c(1,2,3,4,5,6)){
# 두번째 반복문 ( 반복횟수 : 6회 )
for (j in 1:6){
# 조건문 생성 ( 조건식 : 두 주사위의 합이 10 )
if (i + j == 10){
# 조건식이 참이라면 -> 2개의 주사위의 값을 출력한다.
print(c(i,j))
}
}
}
# 초기값을 지정 ( 두개의 주사위 초기값 지정 )
i = 1
j = 1
# while문 시작 : 첫번째 주사위의 조건
while (i < 7){
# 두번째 while문 : 두번째 주사위의 조건
while (j <= 6){
# 두 주사위의 합이 10이라는 조건문 생성
if(i + j == 10){
print(c(i, j))
# 1( 무한루프)
}
# 2
j = j + 1
}
i = i + 1
}
# while문 시작 : 첫번째 주사위의 조건
while (i < 7){
# 두번째 while문 : 두번째 주사위의 조건
while (j <= 6){
# 두 주사위의 합이 10이라는 조건문 생성
if(i + j == 10){
print(c(i, j))
# 1( 무한루프)
}
# 2
j = j + 1
}
print(i)
i = i + 1
}
# 초기값을 지정 ( 두개의 주사위 초기값 지정 )
i = 1
j = 1
# while문 시작 : 첫번째 주사위의 조건
while (i < 7){
# 두번째 while문 : 두번째 주사위의 조건
while (j <= 6){
# 두 주사위의 합이 10이라는 조건문 생성
if(i + j == 10){
print(c(i, j))
# 1( 무한루프)
}
# 2
j = j + 1
}
print(i)
i = i + 1
}
# 초기값을 지정 ( 두개의 주사위 초기값 지정 )
i = 1
j = 1
# while문 시작 : 첫번째 주사위의 조건
while (i < 7){
# 두번째 while문 : 두번째 주사위의 조건
while (j <= 6){
print(c(i,j))
# 두 주사위의 합이 10이라는 조건문 생성
if(i + j == 10){
print(c(i, j))
# 1( 무한루프)
}
# 2
j = j + 1
}
i = i + 1
}
# 초기값을 지정 ( 두개의 주사위 초기값 지정 )
i = 1
j = 1
# while문 시작 : 첫번째 주사위의 조건
while (i < 7){
# 두번째 while문 : 두번째 주사위의 조건
while (j <= 6){
# print(c(i,j))
# 두 주사위의 합이 10이라는 조건문 생성
if(i + j == 10){
print(c(i, j))
# 1( 무한루프)
}
# 2
j = j + 1
}
j = 1
i = i + 1
}
# 매개변수, 인자가 존재하지 않는 함수 생성
func_1 <- function(){
print('Hello R')
}
# 함수 호출
func_1()
# 매개변수가 존재하지 않는 함수에 인자값을 넣으면?
func_1("test")
# 매개변수가 존재하는 함수를 생성
func_2 = function(x, y){
# 입력받은 두개의 값을 더해서 되돌려준다.
result = x + y
return result
}
# 매개변수가 존재하는 함수를 생성
func_2 = function(x, y){
# 입력받은 두개의 값을 더해서 되돌려준다.
result = x + y
return (result)
}
# 매개변수가 존재하는 함수를 호출
func_2(10, 5)
func1_r = func_1()
func2_r = func_2(10, 5)
# 매개변수가 존재하는 함수를 생성
func_2 = function(x, y){
# 입력받은 두개의 값을 더해서 되돌려준다.
result = x + y
return (result)
}
# 매개변수가 존재하는 함수를 호출
func_2(10, 5)
func2_r = func_2(10, 5)
print(x)
# 매개변수에 기본값을 설정한 함수 생성
func_3 = function(x, y = 5){
result = x ^ y
return (result)
}
# 매개변수가 2개 -> 인자 2개
func_3(4)
func_3(4, 2)
func_2(4)
# 매개변수가 3개 기본값이 2개 설정
func_4 = function(x, y = 2, z = 3){
result = (x + y) ^ z
return (result)
}
func_4(3)
# func_4()에서 매개변수 x와 z에 값을 입력
func_4(2, 2, 6)
func_4(2, z = 6)
# 입력 값이 가변인 경우
func_5 = function(...){
print(...)
}
func_5(1,3,4,7)
# 입력 값이 가변인 경우
func_5 = function(...){
print(c(...))
}
func_5(1,3,4,7)
# 다수의 인자 값을 모두 더해서 결과를 돌려주는 함수
sum_func = function(...){
# 반복문을 이용해서 다수의 인자 값을 모두 더해준다.
# 합계라는 초기값을 생성 0 대입
result = 0
for (i in c(...)){
result = result + i
}
return (result)
}
sum_func(1, 3, 5, 7, 9)
sum_func(1, 3, 5)
sum_func2 = function(x){
result = 0
for (i in x){
result  = result + i
}
print(result)
}
sum_func_2(c(1,3,5))
sum_func2(c(1,3,5))
# 함수에서 시작값과 종료값을 입력 받아서 누적합을 구하는 함수
sum_func3 = function(start, end){
# 합계라는 초기값 지정
result = 0
# while 문으로 합계
i = start
# while 조건식
while (i <= end){
result = result + i
i = i + 1
}
return (result)
}
sum_func3(1, 10)
sum_func3(10, 1)
# 함수에서 시작값과 종료값을 입력 받아서 누적합을 구하는 함수
sum_func3 = function(start, end, add_value = 1){
# 합계라는 초기값 지정
result = 0
# 조건문
if (start < end){
s = start
e = end
}else{
s = end
e = start
}
# while 문으로 합계
i = s
# while 조건식
while (i <= e){
result = result + i
i = i + add_value
}
return (result)
}
sum_func3(1, 10)
sum_func3(10, 1)
sum_func_3(1, 10, 3)
sum_func3(1, 10, 3)
mean(c(1,2,3,4))
mean(1,2,3,4)
# 인자의 개수가 가변인 평균을 구하는 함수 생성
mean_func = function(...){
# 평균 = 합계 / 개수
# 합계라는 초기값 지정 (0)
sum_value = 0
# 개수라는 초기값 지정 (0)
cnt = 0
# 반복문 생성
for ( i in c(...) ){
# 누적합
sum_value = sum_value + i
# 개수의 카운터를 1씩 증가
cnt = cnt + 1
}
# 평균 구하기
result = sum_value / cnt
return (result)
}
mean_func(1,2,3,4,5)
mean_func2 = function(...){
sum_value = sum(c(...))
len_value = length(c(...))
result = sum_value / len_value
return (result)
}
mean_func2(1,2,3,4,5)
# 커스텀 연산자
%s% = function(x, y){
result = (x + y) ^ y
return (result)
}
# 커스텀 연산자
%s% <- function(x, y){
result = (x + y) ^ y
return (result)
}
# 커스텀 연산자
"%s%" = function(x, y){
result = (x + y) ^ y
return (result)
}
8 %s% 2
# 데이터프레임
names = c('test', 'test2', 'test3')
grade = c(1, 2, 2)
# 벡터데이터를 이용해서 데이터프레임 생성
student = data.frame(names, grade)
student
midturm = c(70, 80, 90)
final = c(100, 90, 95)
score = cbind(midturm, final)
socre
score
total = midturm + final
total
midturm + 5
students = data.frame(student, score, total)
students
# 데이터프레임에 새로운 컬럼을 추가 (파생변수 생성)
gender = c('M', 'F', 'F', 'M')
cbind(students, gender)
# 데이터프레임에 새로운 컬럼을 추가 (파생변수 생성)
gender = c('M', 'F', 'F')
# cbind() 함수를 이용할때는 원소의 개수가 같아야된다.
cbind(students, gender)
# cbind() 함수를 이용할때는 원소의 개수가 같아야된다.
cbind(students, gender) -> students
# 필터링
# 특정 컬럼을 확인하는 방법
# $컬럼명
# [[컬럼명]]
# [[컬럼의 인덱스]]
students$grade
students[['midturm']]
students[[4]]
# [인덱스의 조건, 컬럼의 조건]
students[, 'midturm']
students[1,]
students[1:3, ]
students[c(1,3), ]
students[c(1, 3), c('midturm', 'final')]
# 중간 성적인 80점 이상인 학생의 데이터를 확인
students$midturm
# 중간 성적인 80점 이상인 학생의 데이터를 확인
students$midturm >= 80
students[students$midturm >= 80, ]
flag = students$midturm >= 80
students[flag, ]
students[flag, 'names']
# 행의 추가(데이터프레임의 컬럼이 같은 데이터를 결합)
new_student = data.frame(
names = 'test4',
gender = 'M',
grade = 3,
midturm = 60,
final = 70,
total = 130
)
new_student
rbind(students, new_student)
rbind(new_student, students)
rbind(students, new_student) -> students
# 오름차순 정렬 : order()
order(students$midturm)
students[order(students$midturm), ]
# 내림차순 정렬
order(students$midturm, decreasing = TRUE)
order(-students$midturm)
# 내림차순 정렬
order(students$names, decreasing = TRUE)
order(-students$names)
# 내림차순 정렬
order(students$midturm, decreasing = TRUE)
order(-students$midturm)
order(-students$midturm) -> flag2
students[flag2, ]
# 상대 경로를 이용하여 데이터 로드
# 현재 위치(./) -> data라는 하위 폴더로 이동(data/)
# -> csv_exam.csv 파일 선택
df = read.csv("./data/csv_exam.csv")
df
# 절대 경로를 이용하여 데이터 로드
df2 = read.csv("c:/ubion_2025/R/data/csv_exam.csv")
df2
# 상대 경로를 이용하여 데이터 로드
# 현재 위치(./) -> data라는 하위 폴더로 이동(data/)
# -> csv_exam.csv 파일 선택
df = read.csv("./data/csv_exam.csv")
df
# 절대 경로를 이용하여 데이터 로드
df2 = read.csv("c:/ubion_2025/R/data/csv_exam.csv")

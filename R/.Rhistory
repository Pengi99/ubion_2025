func_2 = function(x, y){
# 입력받은 두개의 값을 더해서 되돌려준다.
result = x + y
return (result)
}
# 매개변수가 존재하는 함수를 호출
func_2(10, 5)
func1_r = func_1()
func2_r = func_2(10, 5)
# 매개변수가 존재하는 함수를 생성
func_2 = function(x, y){
# 입력받은 두개의 값을 더해서 되돌려준다.
result = x + y
return (result)
}
# 매개변수가 존재하는 함수를 호출
func_2(10, 5)
func2_r = func_2(10, 5)
print(x)
# 매개변수에 기본값을 설정한 함수 생성
func_3 = function(x, y = 5){
result = x ^ y
return (result)
}
# 매개변수가 2개 -> 인자 2개
func_3(4)
func_3(4, 2)
func_2(4)
# 매개변수가 3개 기본값이 2개 설정
func_4 = function(x, y = 2, z = 3){
result = (x + y) ^ z
return (result)
}
func_4(3)
# func_4()에서 매개변수 x와 z에 값을 입력
func_4(2, 2, 6)
func_4(2, z = 6)
# 입력 값이 가변인 경우
func_5 = function(...){
print(...)
}
func_5(1,3,4,7)
# 입력 값이 가변인 경우
func_5 = function(...){
print(c(...))
}
func_5(1,3,4,7)
# 다수의 인자 값을 모두 더해서 결과를 돌려주는 함수
sum_func = function(...){
# 반복문을 이용해서 다수의 인자 값을 모두 더해준다.
# 합계라는 초기값을 생성 0 대입
result = 0
for (i in c(...)){
result = result + i
}
return (result)
}
sum_func(1, 3, 5, 7, 9)
sum_func(1, 3, 5)
sum_func2 = function(x){
result = 0
for (i in x){
result  = result + i
}
print(result)
}
sum_func_2(c(1,3,5))
sum_func2(c(1,3,5))
# 함수에서 시작값과 종료값을 입력 받아서 누적합을 구하는 함수
sum_func3 = function(start, end){
# 합계라는 초기값 지정
result = 0
# while 문으로 합계
i = start
# while 조건식
while (i <= end){
result = result + i
i = i + 1
}
return (result)
}
sum_func3(1, 10)
sum_func3(10, 1)
# 함수에서 시작값과 종료값을 입력 받아서 누적합을 구하는 함수
sum_func3 = function(start, end, add_value = 1){
# 합계라는 초기값 지정
result = 0
# 조건문
if (start < end){
s = start
e = end
}else{
s = end
e = start
}
# while 문으로 합계
i = s
# while 조건식
while (i <= e){
result = result + i
i = i + add_value
}
return (result)
}
sum_func3(1, 10)
sum_func3(10, 1)
sum_func_3(1, 10, 3)
sum_func3(1, 10, 3)
mean(c(1,2,3,4))
mean(1,2,3,4)
# 인자의 개수가 가변인 평균을 구하는 함수 생성
mean_func = function(...){
# 평균 = 합계 / 개수
# 합계라는 초기값 지정 (0)
sum_value = 0
# 개수라는 초기값 지정 (0)
cnt = 0
# 반복문 생성
for ( i in c(...) ){
# 누적합
sum_value = sum_value + i
# 개수의 카운터를 1씩 증가
cnt = cnt + 1
}
# 평균 구하기
result = sum_value / cnt
return (result)
}
mean_func(1,2,3,4,5)
mean_func2 = function(...){
sum_value = sum(c(...))
len_value = length(c(...))
result = sum_value / len_value
return (result)
}
mean_func2(1,2,3,4,5)
# 커스텀 연산자
%s% = function(x, y){
result = (x + y) ^ y
return (result)
}
# 커스텀 연산자
%s% <- function(x, y){
result = (x + y) ^ y
return (result)
}
# 커스텀 연산자
"%s%" = function(x, y){
result = (x + y) ^ y
return (result)
}
8 %s% 2
# 데이터프레임
names = c('test', 'test2', 'test3')
grade = c(1, 2, 2)
# 벡터데이터를 이용해서 데이터프레임 생성
student = data.frame(names, grade)
student
midturm = c(70, 80, 90)
final = c(100, 90, 95)
score = cbind(midturm, final)
socre
score
total = midturm + final
total
midturm + 5
students = data.frame(student, score, total)
students
# 데이터프레임에 새로운 컬럼을 추가 (파생변수 생성)
gender = c('M', 'F', 'F', 'M')
cbind(students, gender)
# 데이터프레임에 새로운 컬럼을 추가 (파생변수 생성)
gender = c('M', 'F', 'F')
# cbind() 함수를 이용할때는 원소의 개수가 같아야된다.
cbind(students, gender)
# cbind() 함수를 이용할때는 원소의 개수가 같아야된다.
cbind(students, gender) -> students
# 필터링
# 특정 컬럼을 확인하는 방법
# $컬럼명
# [[컬럼명]]
# [[컬럼의 인덱스]]
students$grade
students[['midturm']]
students[[4]]
# [인덱스의 조건, 컬럼의 조건]
students[, 'midturm']
students[1,]
students[1:3, ]
students[c(1,3), ]
students[c(1, 3), c('midturm', 'final')]
# 중간 성적인 80점 이상인 학생의 데이터를 확인
students$midturm
# 중간 성적인 80점 이상인 학생의 데이터를 확인
students$midturm >= 80
students[students$midturm >= 80, ]
flag = students$midturm >= 80
students[flag, ]
students[flag, 'names']
# 행의 추가(데이터프레임의 컬럼이 같은 데이터를 결합)
new_student = data.frame(
names = 'test4',
gender = 'M',
grade = 3,
midturm = 60,
final = 70,
total = 130
)
new_student
rbind(students, new_student)
rbind(new_student, students)
rbind(students, new_student) -> students
# 오름차순 정렬 : order()
order(students$midturm)
students[order(students$midturm), ]
# 내림차순 정렬
order(students$midturm, decreasing = TRUE)
order(-students$midturm)
# 내림차순 정렬
order(students$names, decreasing = TRUE)
order(-students$names)
# 내림차순 정렬
order(students$midturm, decreasing = TRUE)
order(-students$midturm)
order(-students$midturm) -> flag2
students[flag2, ]
# 상대 경로를 이용하여 데이터 로드
# 현재 위치(./) -> data라는 하위 폴더로 이동(data/)
# -> csv_exam.csv 파일 선택
df = read.csv("./data/csv_exam.csv")
df
# 절대 경로를 이용하여 데이터 로드
df2 = read.csv("c:/ubion_2025/R/data/csv_exam.csv")
df2
# 상대 경로를 이용하여 데이터 로드
# 현재 위치(./) -> data라는 하위 폴더로 이동(data/)
# -> csv_exam.csv 파일 선택
df = read.csv("./data/csv_exam.csv")
df
# 절대 경로를 이용하여 데이터 로드
df2 = read.csv("c:/ubion_2025/R/data/csv_exam.csv")
# 상대 경로를 이용하여 데이터 로드
# 현재 위치(./) -> data라는 하위 폴더로 이동(data/)
# -> csv_exam.csv 파일 선택
df = read.csv("./data/csv_exam.csv")
df
# 데이터프레임의 상위만 출력
head(df)
df[1:6, ]
head(df, 2)
# 데이터프레임의 하위만 출력
tail(df)
df[-6:, ]
tail(df, 2)
# 데이터프레임의 크기 출력
dim(df)
# 데이터프레임의 기본 정보 출력
str(df)
# 데이터프레임을 뷰어창에 확인
View(df)
view(df)
# view(df)
# 통계 요약 정보 출력
summary(df)
# 수학, 영어, 과학 성적은 모두 더하여
# 새로운 컬럼을 생성
df$math + df[['english']] + df[[5]]
# 수학, 영어, 과학 성적은 모두 더하여
# 새로운 컬럼을 생성
df$math + df[['english']] + df[[5]] -> df$total
head(df)
# total을 이용해서 평균 점수 컬럼을 생성
df$total / 3
# total을 이용해서 평균 점수 컬럼을 생성
df$total / 3 -> mean_score
cbind(df, mean_score)
cbind(df, mean_score) -> df
# mean_score가 65점 초과라면 'pass'
# 65점 미만이라면 'fail'
# 65점이라면 'hold'
# ifelse()함수를 이용
# ifelse( 조건식 , 참인경우 결과, 거짓인 경우 결과 )
ifelse(
df$mean_score > 65,
'pass',
ifelse(
df$mean_score == 65,
'hold',
'fail'
)
)
# mean_score가 65점 초과라면 'pass'
# 65점 미만이라면 'fail'
# 65점이라면 'hold'
# ifelse()함수를 이용
# ifelse( 조건식 , 참인경우 결과, 거짓인 경우 결과 )
ifelse(
df$mean_score > 65,
'pass',
ifelse(
df$mean_score == 65,
'hold',
'fail'
)
) -> df$check
head(df)
# 외부의 패키지 설치
install.packages('dplyr')
# 패키지 로드
library(dplyr)
detach("package:dplyr", unload = TRUE)
library(dplyr)
install.packages("ggplot2")
# 컬럼의 이름을 변경
# rename()함수
head(df)
rename(df, mean = mean_score)
rename(df, mean = mean_score) -> df
head(df)
df %>% head()
df <- read.csv('./data/csv_exam.csv')
# filter(조건식) : 인덱스 조건식으로 인덱스 필터
df %>%
filter(class == 1)
# 기본
df$class == 1
# 기본
df[df$class == 1, ]
# select(조건식) : 컬럼의 조건식으로 컬럼 필터
df %>%
select(math : science)
df %>%
select(-class)
# class가 3인 데이터들 중에 (인덱스의 조건)
# math, english 성적을 확인 (컬럼의 조건)
# 패키지
df %>%
filter(class == 3) %>%
select(math, english)
# 기본
df[df$class == 3, c('math', 'english')]
# 차순정렬
# arrange()
df %>%
arrange(math)
# 내림차순 정렬
df %>%
arrange(desc(math))
df %>%
arrange(-math)
# 그룹화
# group_by()
df %>%
group_by(class)
# 그룹화
# group_by()
df %>%
group_by(class) %>%
summarise(mean_math = mean(math))
df_1 = data.frame(
id = 1:3,
score = c(80, 70, 90)
)
df_2 = data.frame(
id = 2:5,
weight = c(60, 70, 75, 80)
)
rbind(df_1, df_2)
df_1 %>%
bind_rows(df_2)
# 두개의 데이터프레임이 공통적으로 가지고 있는 데이터들의 결합
inner_join(df_1, df_2, by='id')
# 왼쪽 데이터프레임을 기준으로 조인 결합
left_join(df_1, df_2, by='id')
# 오른쪽 데이터프레임을 기준으로 조인 결합
right_join(df_1, df_2, by='id')
# 두개의 데이터프레임의 모든 정보를 가지고 결합
full_join(df_1, df_2, by='id')
df_1 %>%
inner_join(df_2, by='id')
df_3 = data.frame(
id = c(2, 5),
gender = c(1, 2)
)
bind_rows(df_1, df_2, df_3)
# 3개의 데이터프레임을 조인 결합
inner_join(df_1, df_2, df_3, by='id')
# case1
inner_join(
inner_join(df_1, df_2, by='id'),
df_3,
by='id'
)
# case2 (파이프)
df_1 %>%
inner_join(df_2, by='id') %>%
inner_join(df_3, by='id')
library(ggplot2)
midwest = ggplot2::midwest
head(midwest)
str(midwest)
View(midwest)
# poptotal컬럼의 이름을 total로 변경
# popasian컬럼의 이름을 asian으로 변경
# rename() -> 패키지에 존재
rename(midwest, asian = popasian, total = poptotal)
midwest %>%
rename(asian = popasian) %>%
rename(total = poptotal)
# 컬럼의 이름을 변경
# 특정 컬럼을 선택(county, total, asian)
# 파생변수 생성 (ratio) -> (asian / total) * 100
# ratio 컬럼의 내림차순 정렬
# 상위 5개 -> head(5)
midwest %>%
rename(asian = popasian, total = poptotal)
# 컬럼의 이름을 변경
# 특정 컬럼을 선택(county, total, asian)
# 파생변수 생성 (ratio) -> (asian / total) * 100
# ratio 컬럼의 내림차순 정렬
# 상위 5개 -> head(5)
midwest %>%
rename(asian = popasian, total = poptotal) %>%
select(county, total, asian)
# 컬럼의 이름을 변경
# 특정 컬럼을 선택(county, total, asian)
# 파생변수 생성 (ratio) -> (asian / total) * 100
# ratio 컬럼의 내림차순 정렬
# 상위 5개 -> head(5)
midwest %>%
rename(asian = popasian, total = poptotal) %>%
select(county, total, asian) %>%
mutate(ratio = (asian / total)*100 )
# 컬럼의 이름을 변경
# 특정 컬럼을 선택(county, total, asian)
# 파생변수 생성 (ratio) -> (asian / total) * 100
# ratio 컬럼의 내림차순 정렬
# 상위 5개 -> head(5)
midwest %>%
rename(asian = popasian, total = poptotal) %>%
select(county, total, asian) %>%
mutate(ratio = (asian / total)*100 ) %>%
arrange(desc(ratio))
# 컬럼의 이름을 변경
# 특정 컬럼을 선택(county, total, asian)
# 파생변수 생성 (ratio) -> (asian / total) * 100
# ratio 컬럼의 내림차순 정렬
# 상위 5개 -> head(5)
midwest %>%
rename(asian = popasian, total = poptotal) %>%
select(county, total, asian) %>%
mutate(ratio = (asian / total)*100 ) %>%
arrange(desc(ratio)) %>%
head(5)
# 컬럼의 이름을 변경
rename(midwest, asian = popasian, total = poptotal)
# 컬럼의 이름을 변경
df = rename(midwest, asian = popasian, total = poptotal)
df[, c('county', 'asian', 'total')]
df2 = df[, c('county', 'asian', 'total')]
df2$asian / df2$total * 100
# 새로운 컬럼을 생성
ratio = df2$asian / df2$total * 100
df2$ratio = ratio
# 내림차순 정렬
order(-df2$ratio)
# 내림차순 정렬
flag = order(-df2$ratio)
df2[flag, ]
df3 = df2[flag, ]
head(df3, 5)
# ratio 컬럼의 평균을 저장
mean(df3$ratio)
# ratio 컬럼의 평균을 저장
mean(df3$ratio) -> mean_value
# ifelse(조건식 : ratio 데이터값 > 평균값 , 결과.... )
ifelse(
df3$ratio > mean_value,
'large',
ifelse(
df3$ratio == mean_value,
'middle',
'small'
)
)
# ifelse(조건식 : ratio 데이터값 > 평균값 , 결과.... )
ifelse(
df3$ratio > mean_value,
'large',
ifelse(
df3$ratio == mean_value,
'middle',
'small'
)
) -> group_data
# 새로운 컬럼에 대입
df3$group = group_data
midwest %>%
rename(asian = popasian, total = poptotal) %>%
select(county, total, asian) %>%
mutate(ratio = (asian / total)*100 ) %>%
arrange(desc(ratio)) %>%
mutate(group =
ifelse(
ratio > mean(ratio),
'large',
ifelse(
ratio == mean(ratio),
'middle',
'small'
)
))
